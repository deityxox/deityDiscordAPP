const { ChannelType ,PermissionsBitField, EmbedBuilder, ApplicationCommandOptionType, PermissionFlagsBits, ChatInputCommandInteraction, ALLOWED_EXTENSIONS } = require('discord.js');
const Transcripts = require("discord-html-transcripts");
  
  module.exports = {
    name: 'clear',
    description: 'Kanallardaki istenmeyen mesajlarÄ± belirtilen sayÄ± Ã¼zerinden silme iÅŸlemi yapar',
    // devOnly: Boolean,
    // testOnly: Boolean,
    options: [
      {
        name: 'mesaj_sayÄ±sÄ±',
        description: 'Silinecek Mesaj SayÄ±sÄ± (1-99 ArasÄ± kullanÄ±m Ã¶nerilir)',
        required: true,
        type: ApplicationCommandOptionType.Number,
        min_value: 1,
        max_value:100,
      },
      {
        name: 'silme_nedeni',
        description: 'Sunucu TaraflÄ± Silinen MesajlarÄ±n LoglarÄ± iÃ§in Silme Nedeni',
        required: true,
        type: ApplicationCommandOptionType.String,
      },
      {
        name: 'kullanÄ±cÄ±',
        description: 'MesajlarÄ± silinecek kullanÄ±cÄ±.(SeÃ§im yoksa son atÄ±lan mesajdan belirtilen sayÄ± kadar mesaj silinir)',
        type: ApplicationCommandOptionType.User,
      },
    ],
    permissionsRequired: [PermissionFlagsBits.Administrator],
    botPermissions: [PermissionFlagsBits.Administrator],

        /**
     * 
     * @param {ChatInputCommandInteraction} interaction 
     */
  
    callback: async (_client, interaction) => {


      const Amount = interaction.options.getNumber("mesaj_sayÄ±sÄ±");
      const Reason = interaction.options.getString("silme_nedeni");
      const Target = interaction.options.getUser("kullanÄ±cÄ±");

      const channelMessages = await interaction.channel.messages.fetch();

      
      const categoryName = 'deity Admin';
      // Ã–nce kategoriyi bulmaya Ã§alÄ±ÅŸ
let category = interaction.guild.channels.cache.find(channel => channel.name === categoryName && channel.type === ChannelType.GuildCategory);

// EÄŸer kategori bulunamazsa, yeni bir kategori oluÅŸtur
if (!category) {
    try {
        category = await interaction.guild.channels.create({
            name: categoryName,
            type: ChannelType.GuildCategory,
            permissionOverwrites: [
                {
                    id: interaction.guild.roles.everyone, // Herkes rolÃ¼nÃ¼ alÄ±r
                    deny: [PermissionsBitField.Flags.ViewChannel], // Herkese kategoriyi gÃ¶rmeyi yasaklar
                },
                {
                    id: interaction.guild.roles.cache.find(role => role.permissions.has([PermissionsBitField.Flags.ManageGuild])).id, // Admin rolÃ¼nÃ¼ alÄ±r
                    allow: [PermissionsBitField.Flags.ViewChannel], // Adminlere kategoriyi gÃ¶rme izni verir
                }
            ],
            reason: 'Admin loglarÄ± iÃ§in kategori oluÅŸturuldu ve sadece adminler gÃ¶rebilir.'
        });
        console.log(`Kategori ${categoryName} baÅŸarÄ±yla oluÅŸturuldu.`);
    } catch (error) {
        console.error('Kategori oluÅŸturulurken bir hata oluÅŸtu:', error);
    }
}






      const logChannelName = 'deity-clearlogs';

      // KanalÄ± bulmaya Ã§alÄ±ÅŸ
      let logChannel = interaction.guild.channels.cache.find(channel => channel.name === logChannelName);
      
      // EÄŸer kanal bulunamazsa, yeni bir kanal oluÅŸtur
      if (!logChannel) {
          try {
              logChannel = await interaction.guild.channels.create({
                  name: logChannelName,
                  type: ChannelType.GuildText, // Metin kanalÄ± tÃ¼rÃ¼ belirtildi
                  parent: category ? category.id : null, // KanalÄ± kategori iÃ§inde oluÅŸturur
                  permissionOverwrites: [
                      {
                          id: interaction.guild.roles.everyone, // Herkes rolÃ¼nÃ¼ alÄ±r
                          deny: [PermissionsBitField.Flags.ViewChannel], // Herkese kanalÄ± gÃ¶rmeyi yasaklar
                      },
                      {
                          id: interaction.guild.roles.cache.find(role => role.permissions.has([PermissionsBitField.Flags.ManageGuild])).id, // Admin rolÃ¼nÃ¼ alÄ±r
                          allow: [PermissionsBitField.Flags.ViewChannel], // Adminlere kanalÄ± gÃ¶rme izni verir
                      }
                  ],
                  reason: 'Log kanalÄ± oluÅŸturuldu Ã§Ã¼nkÃ¼ mevcut deÄŸildi ve sadece adminler gÃ¶rebilir.'
              });
              console.log(`Kanal ${logChannelName} baÅŸarÄ±yla oluÅŸturuldu ve sadece adminler gÃ¶rebiliyor.`);
          } catch (error) {
              console.error('Kanal oluÅŸturulurken bir hata oluÅŸtu:', error);
          }
      }


      const responseEmbed = new EmbedBuilder().setColor('Purple');
      const logEmbed = new EmbedBuilder().setColor('DarkPurple')
      .setAuthor({name: " ðŸ§¹ Sohbet Temizleme Komutu KullanÄ±ldÄ± ðŸ§¹ "});

      let logEmbedDescription = [
          `â€¢ Ä°ÅŸlem Yapan: ${interaction.member}`,
          `â€¢ Ä°ÅŸlem YapÄ±lan: ${Target || "SeÃ§ilmedi"}`,
          `â€¢ Ä°ÅŸlem Nedeni: ${Reason}`,
          `â€¢ Kanal: ${interaction.channel}`
      ];

      if(Target) {
          let i = 0;
          let messagesToDelete = [];
          channelMessages.filter((message) => {
              if(message.author.id === Target.id && Amount > i) {
                  messagesToDelete.push(message);
                  i++
              }
          });

          const Transcript = await Transcripts.generateFromMessages(messagesToDelete, interaction.channel);

          interaction.channel.bulkDelete(messagesToDelete, true).then((messages) =>{
              interaction.reply({
                  embeds: [responseEmbed.setDescription(` ðŸ§¹ ${Target} KullanÄ±cÄ±sÄ±ndan \`${messages.size}\` adet mesaj silindi. `)],
                  ephemeral: true
              });

              logEmbedDescription.push(`â€¢ Toplam Silinen Mesaj: ${messages.size}`);
              logChannel.send({
                  embeds: [logEmbed.setDescription(logEmbedDescription.join("\n"))],
                  files: [Transcript]
              });
          });
      } else {
          const Transcript = await Transcripts.createTranscript(interaction.channel, { limit: Amount, returnType: 'attachment', filename: 'transcript.html',saveImages:'false',footerText: "{number} tane mesaj silindi",poweredBy: false,hydrate: true});

          interaction.channel.bulkDelete(Amount, true).then((messages) => {

              interaction.reply({
                  embeds: [responseEmbed.setDescription(` ðŸ§¹ \`${messages.size}\` adet mesaj silindi.`)],
                  ephemeral: true
              });
  
              logEmbedDescription.push(`â€¢ Total Messages: ${messages.size}`);
              logChannel.send({
                  embeds: [logEmbed.setDescription(logEmbedDescription.join("\n"))],
                  files: [Transcript]
              });
          });

      }
  }
}